using关键字在C#中的3种用法
	(一).作为指令

	1、用在命名空间里    

	using + 命名空间名字，这样可以在程序中直接用命令空间中的类型，而不必指定类型的详细命名空间，类似于Java的import，这个功能也是最常用的，几乎每个cs的程序都会用到。
	例如：using System; 一般都会出现在*.cs中。

	2、为命名空间或类型创建别名，using + 别名 = 包括详细命名空间信息的具体的类型。

	这种做法有个好处就是当同一个cs引用了两个不同的命名空间，但两个命名空间都包括了一个相同名字的类型的时候。当需要用到这个类型的时候，就每个地方都要用详细命名空间的办法来区分这些相同名字的类型。而用别名的方法会更简洁，用到哪个类就给哪个类做别名声明就可以了。注意：并不是说两个名字重复，给其中一个用了别名，另外一个就不需要用别名了，如果两个都要使用，则两个都需要用using来定义别名的。


	(二).作为语句

	using 语句允许程序员指定使用资源的对象应当何时释放资源。using 语句中使用的对象必须实现 IDisposable 接口。此接口提供了 Dispose 方法，该方法将释放此对象的资源。

		①可以在 using 语句之前声明对象。
	　　    Font font2 = new Font("Arial", 10.0f);
	　　    using (font2)
	　　    {
	　　        // use font2
	　　    }
		②可以在 using 语句之中声明对象。
	　　    using (Font font2 = new Font("Arial", 10.0f))
	　　    {
	　　        // use font2
	　　    }
		③可以有多个对象与 using 语句一起使用，但是必须在 using 语句内部声明这些对象。
			using (Font font3=new Font("Arial",10.0f), font4=new Font("Arial",10.0f))
	　　    {
	　　        // Use font3 and font4.
	　　    }

	使用规则
	①using只能用于实现了IDisposable接口的类型，禁止为不支持IDisposable接口的类型使用using语句，否则会出现编译错误；
	②using语句适用于清理单个非托管资源的情况，而多个非托管对象的清理最好以try-finnaly来实现，因为嵌套的using语句可能存在隐藏的Bug。内层using块引发异常时，将不能释放外层using块的对象资源；
	③using语句支持初始化多个变量，但前提是这些变量的类型必须相同，例如：
			using(Pen p1 = new Pen(Brushes.Black), p2 = new Pen(Brushes.Blue))
	　　    {
	　　        //
	　　    }
	④针对初始化多个不同类型的变量时，可以都声明为IDisposable类型，例如：
			using (IDisposable font = new Font("Verdana", 12), pen = new Pen(Brushes.Black))
	　　    {
	　　        float size = (font as Font).Size;
	　　        Brush brush = (pen as Pen).Brush;
	　　    }

	using实质
		在程序编译阶段，编译器会自动将using语句生成为try-finally语句，并在finally块中调用对象的Dispose方法，来清理资源。所以，using语句等效于try-finally语句，例如：

	using (Font f2 = new Font("Arial", 10, FontStyle.Bold)）
	{
		 font2.F();
	}

	被编译器翻译为：
		 Font f2 = new Font("Arial", 10, FontStyle.Bold);
	　　try
	　　{
	　　    font2.F();

	　　}
	　　finally
	　　{
	　　    if (f2 != null) ((IDisposable)f2).Dispose();
	　　} 


C# string 字符串的前面可以加 @（称作"逐字字符串"）将转义字符（\）当作普通字符对待

参数传递
	按值传递参数
	
	按引用传递参数
		引用参数是一个对变量的内存位置的引用。当按引用传递参数时，与值参数不同的是，它不会为这些参数创建一个新的存储位置。引用参数表示与提供给方法的实际参数具有相同的内存位置。
		在 C# 中，使用 ref 关键字声明引用参数。下面的实例演示了这点：

按输出传递参数
	return 语句可用于只从函数中返回一个值。但是，可以使用 out 关键字 输出参数 来从函数中返回两个值。输出参数会把方法输出的数据赋给自己，其他方面与引用参数相似。




? : 单问号用于对 int,double,bool 等无法直接赋值为 null 的数据类型进行 null 的赋值，意思是这个数据类型是 NullAble 类型的。
	int? i = 3 
	等同于
	Nullable<int> i = new Nullable<int>(3);

	int i; //默认值0
	int? ii; //默认值null


?? : 双问号 可用于判断一个变量在为 null 时返回一个指定的值。
	num3 = num1 ?? 5.34;      // num1 如果为空值则返回 5.34


	
属性的本质是方法，所以接口中可以包含属性。

C#可以自动在后台为属性创建字段。
	Public string A {get;set;}

	上面的代码编译bai后的IL(中间语言)，会du自动生成如下zhi代码：
		private string _a;
		public string A{get{return _a;} set{_a = value;}} 
	
属性的使用
	作用：在面向对象设计中主要使用属性描述对象的静态特征。
	要求：一般采用Pascal命名法（首字母大写），数据类型要和对应的字段要一致。
属性的理解
	a.属性其实就是外界访问私有字段的入口，属性本身不保存任何数据，在对属性赋值和读取的时候其实就是操作的对应私有字段。
	b.属性本质其实就是一个方法，通过get和set方法来操作对应的字段

属性的作用
	A.避免出现非法数据，例如一个年龄属性，正常逻辑是年龄是不可以出现负数的，如果用户对年龄进行了负数的赋值，我们通过属性的set方法加入判断逻辑，从而排除这种非法数据。
	B.限定属性只读或者只写，例如有些属性为了保护数据，我们只能读取，而不能赋值。具体使用的话，我们根据需要，屏蔽set或get方法达到只读和只写。
	C．没有对应私有字段的属性，例如根据生日属性获取到年龄。
	
	
字段与属性比较
	字段（成员变量）
		a.字段主要是为类的内部做数据交互使用，字段一般是private。
		b.字段可读可写。
		c.当字段需要为外部提供数据的时候，请将字段封装为属性，而不是使用公有字段(public修饰符)，这是面向对象思想所提倡的。


	属性（方法）
		a.属性一般是向外提供数据，主要用来描述对象的静态特征，所以，属性一般是public。
		b.属性具备get和set方法，可以在方法里加入逻辑处理数据，灵活拓展使用。
	
自动属性	
	没有特定业务逻辑的属性都可以简写成自动属性，自动属性的格式不能修改。自动属性对应的字段由编译器自动生成。
	
定义属性的语法形式如下。

		public    数据类型    属性名
		{
			get
			{
				获取属性的语句块;
				return 值;
			}
			set
			{
				设置属性得到语句块;
			}
		}
			其中：
			1) get{}
			get 访问器，用于获取属性的值，需要在 get 语句最后使用 return 关键字返回一个与属性数据类型相兼容的值。
			
			若在属性定义中省略了该访问器，则不能在其他类中获取私有类型的字段值，因此也称为只写属性。
			2) set{}
			set 访问器用于设置字段的值，这里需要使用一个特殊的值 value，它就是给字段赋的值。


	在 C# 语言中可以将属性的定义简化成如下写法。
		public    数据类型    属性名{get;set;}
	这种方式也被称为自动属性设置。简化后图书类中的属性设置的代码如下。
		public int Id{get; set;}
		public string Name{get; set;}
		public double Price{get; set;}






#region 是 C# 预处理器指令。

#region 块必须以 #endregion 指令终止。




