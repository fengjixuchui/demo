APP_ABI  指定指令集
NDK_TOOLCHAIN_VERSION  设置编译器版本
APP_PLATFORM     使用的ndk库函数版本号。一般和SDK的版本相对应，各个版本在NDK目录下的platforms文件夹中

APP_STL       如何连接c++标准库 。
                               stlport_static    静态链接 
                               stlport_shared    动态链接 
                               system    系统默认
APP_CPPFLAGS
      和前面说明的APP_CFLAGS变量类似，它也是用来指定一些特殊的编译选项，但只对编译C++源文件其作用。
	  
	  
Android.mk文件向Android NDK描述你的C和C++文件
	Android.mk文件必须以变量LOCAL_PATH的定义起始。这个变量用来定位开发树中的源文件的位置。在这个例子中，使用了编译环境中的宏方法my-dir，它可以返回当前目录（包含Android.mk文件的目录）的路径。
	
    include $(CLEAR_VARS)

    变量CLEAR_VARS也是编译环境提供的，指向一个特别的GNU Make文件，这个Make文件会帮你清除一些LOCAL_XXX变量（如LOCAL_MODULE, LOCAL_SRC_FILES, LOCAL_STATIC_LIBRARIES等），但不会清除LOCAL_PATH。这是因为所有的编译控制文件会被GNU Make环境解析为全局变量。

    变量LOCAL_MODULE必须被定义，用以区分你在Android.mk文件中定义的每一个模块。这个名字必须是唯一的而且不能够含有空格。注意编译系统会为生成的文件自动添加正确的前缀和后缀。也就是说，一个名为foo的模块会生成libfoo.so。


     LOCAL_SRC_FILES变量必须包含将要编译到模块中的C和/或C++源文件的列表。注意，你不许要在这里列出头文件，编译环境会自动帮你处理这些依赖，只需要列出被编译器直接编译的源文件即可。
     注意，C++源文件的默认扩展名是.cpp。你也可以通过定义变量LOCAL_CPP_EXTENSION来指定一个不同的扩展名。不要忘记.（.cxx是可以的，但是cxx不行）。

    include $(BUILD_SHARED_LIBRARY)
    BUILD_SHARED_LIBRARY变量是由编译环境提供，指向一个GNU Make脚本文件，负责收集自上一个include $(CLEAR_VARS)之后你定义的所有LOCAL_XXX变量，确定编译内容以及如何编译。BUILD_STATIC_LIBRARY用来生成静态库。


    PREBUILT_SHARED_LIBRARY
    指向一个脚本，用来指定一个预置共享库，和BUILD_SHARED_LIBRARY以及BUILD_STATIC_LIBRARY不同的是，LOCAL_SRC_FILES的值必须是一个预置共享库的路径，而不是一个源文件。如，foo/libfoo.so。

    PREBUILT_STATIC_LIBRARY
    和PREBUILT_SHARED_LIBRARY一样，但指定一个静态库。

    LOCAL_C_INCLUDES
    可选，相对NDK根目录的相对路径列表，在编译所有的源文件时会被添加到搜索路径后面，如：

    LOCAL_LDLIBS
    编译你的模块时需要的额外链接flags列表。传递指定的以-l为前缀的系统库。如，下述指令会告诉链接器生成一个在加载的时候链接到/system/lib/libz.so的模块：



