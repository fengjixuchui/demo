第一种， 通过鼠标左键点击，定位函数处理过程
	(问题:如果MFC库是采用动态链接，那么在.text段下断点的方法能较快定位，好像也要经过很多次。如果是静态链接那么，MFC的代码和你处理事件代码在同一空间，这种方法好像很困难。)
	typedef struct tagMSG {
	  HWND   hwnd;
	  UINT   message;
	  WPARAM wParam;
	  LPARAM lParam;
	  DWORD  time;
	  POINT  pt;
	  DWORD  lPrivate;
	} MSG, *PMSG, *NPMSG, *LPMSG;

	BOOL TranslateMessage(  CONST MSG *lpMsg );

	条件断点(捕捉鼠标左击)
		bp TranslateMessage	[[esp+4]+4]  == 0x0202
	
	


2. 通过CWinApp的类中的static const AFX_MSGMAP_ENTRY _messageEntries[]消息映射数组
   经过大量的实验发现， _messageEntries是全局静态数组，基本都存在于程序的 .rdata段。
	1) 特征码搜索(可能有多个，需要逐个排除)
		struct AFX_MSGMAP_ENTRY
		{
			UINT nMessage;   // windows message
			UINT nCode;      // control code or WM_NOTIFY code
			UINT nID;        // control ID (or 0 for windows messages)
			UINT nLastID;    // used for entries specifying a range of control id's
			UINT_PTR nSig;       // signature type (action) or pointer to message #
			AFX_PMSG pfn;    // routine to call (or special value)
		};

		{0x0112,0,0,0 , 31(maybe), func}
		内存排列(搜索)
			12 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 (1F 00 00 00)
		(按钮)
			{ WM_COMMAND 0x0111, (WORD)BN_CLICKED 0 , (WORD)IDC_BUTTON1 1003, (WORD)IDC_BUTTON1 1003, AfxSigCmd_v 58(maybe),&CLoadTestDlg::OnBnClickedButton1},
			{0x0111,0, id, id, 58(maybe), func}
		查找0x0111数据，用于定位按钮
		找到具体地址后，然后获取到文件偏移，放入到IDA分析。


		64位系统，过滤全部消息映射数组(默认最后一个消息为按钮点击事件)
			11 01 00 00 00 00 00 00 ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
		
		
	2) 通过CWinApp类虚函数
			const AFX_MSGMAP* theClass::GetMessageMap() const 
					{ return GetThisMessageMap(); } 
			struct AFX_MSGMAP
			{
				const AFX_MSGMAP* (PASCAL* pfnGetBaseMap)();
				const AFX_MSGMAP_ENTRY* lpEntries;
			};
			struct AFX_MSGMAP_ENTRY
			{
				UINT nMessage;   // windows message
				UINT nCode;      // control code or WM_NOTIFY code
				UINT nID;        // control ID (or 0 for windows messages)
				UINT nLastID;    // used for entries specifying a range of control id's
				UINT_PTR nSig; (64位程序是8个字节)      // signature type (action) or pointer to message #
				AFX_PMSG pfn;  (64位程序是8个字节)  // routine to call (or special value)
			};
			
3. 对于CreateDialogIndirectParamW 分析
	TODO






