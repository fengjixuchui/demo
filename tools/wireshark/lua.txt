


-- wireshark lua API文档 https://www.wireshark.org/docs/wsdg_html_chunked/lua_module_Proto.html

-- 实例1：
-- create a new dissector
do
	local NAME = "foo"
	local PORT = 1025
	local foo = Proto(NAME, "Foo Protocol")


	local fields = foo.fields
	--新建协议属性
	--协议字段（在将项目添加到解剖树时使用）。
	--第一个参数 字段的缩写（过滤器中使用的字符串）。
	--第二个参数 字段的实际名称（显示在树中的字符串）。
	fields.type = ProtoField.uint8 (NAME .. ".type", "Type")
	fields.flags = ProtoField.uint8 (NAME .. ".flags", "Flags")
	fields.seqno = ProtoField.uint16(NAME .. ".seqno", "Seq No.")
	fields.ipaddr = ProtoField.ipv4(NAME .. ".ipaddr", "IPv4 Address")

	
	
	local VALS_BIT_1_3  = {[0x0] = "SYN", [0x1] = "ACK", [0x2] ="ERR", [0x3] = "UNKOWN"}
	local VALS_BIT_2  	= {[0x0] = "STOP", [0x1] = "RUN", [0x2] ="SHUTDOWN", [0x3] = "REBOOT",[0x4] = "IDLE",[0x7] = "ERR"}
	local VALS_BIT_4 = {[0] = "False", [1] = "True"}
	
	
	
	
	

	
	--72 ‭0100 1000‬
    --msg_bitx: 0x72
    --    .... ..10 = msg_bit1: ERR (2)
    --    ...1 00.. = msg_bit2: IDLE (4)
    --    .11. .... = msg_bit3: UNKOWN (3)
    --    0... .... = msg_bit4: False (0)
	fields.msg_bitx = ProtoField.uint8(NAME .. "MSG_BITX", "msg_bitx", base.HEX)	-- 位域定义
	fields.msg_bit1 = ProtoField.uint8("MSG_BIT1", "msg_bit1", base.DEC, VALS_BIT_1_3, 0x3)
	fields.msg_bit2 = ProtoField.uint8("MSG_BIT2", "msg_bit2", base.DEC, VALS_BIT_2, 0x1C)
	fields.msg_bit3 = ProtoField.uint8("MSG_BIT3", "msg_bit3", base.DEC, VALS_BIT_1_3, 0x60)
	fields.msg_bit4 = ProtoField.uint8("MSG_BIT4", "msg_bit4", base.DEC, VALS_BIT_4, 0x80)


	-- dissect packet
	--要解析的缓冲区
	--数据包信息
	--在其上添加协议项的树。
	--返回值: 解析的字节数。 请注意，某些解剖器总是在传入缓冲区中返回字节数，因此请注意。
	function foo.dissector (tvb, pinfo, tree)
		local subtree = tree:add(foo, tvb())
		local offset = 0
		
		-- show protocol name in protocol column
		pinfo.cols.protocol = foo.name
		
		-- dissect field one by one, and add to protocol tree
		local type = tvb(offset, 1)
		subtree:add(fields.type, type)
		subtree:append_text(", type: " .. type:uint())
		offset = offset + 1
		
		subtree:add(fields.flags, tvb(offset, 1))
		offset = offset + 1
		subtree:add(fields.seqno, tvb(offset, 2))
		offset = offset + 2
		subtree:add(fields.ipaddr, tvb(offset, 4))
		
		
		offset = offset + 4
		local msg_bitx_tree = subtree:add( fields.msg_bitx, tvb(offset,1) )       -- bitfield
		msg_bitx_tree:add(fields.msg_bit1,tvb(offset,1))
		msg_bitx_tree:add(fields.msg_bit2,tvb(offset,1))
		msg_bitx_tree:add(fields.msg_bit3,tvb(offset,1))
		msg_bitx_tree:add(fields.msg_bit4,tvb(offset,1))
		
	end

	-- register this dissector
	DissectorTable.get("udp.port"):add(PORT, foo)

end






--实例2：
do
    --协议名称为ScoreBoard，在Packet Details窗格显示为yoursunny.P2008.IS409 ScoreBoard
    local p_ScoreBoard = Proto("ScoreBoard","yoursunny.P2008.IS409 ScoreBoard")
	
	
    --协议的各个字段
    local f_identifier = ProtoField.bytes("ScoreBoard.identifier","Identifier")
    local f_operator = ProtoField.uint8("ScoreBoard.operator","Operator",base.HEX,
        --这个字段的数字值都有相应的含义，可以自动对应成字符串
        { [0] = "get-value", [1] = "set-value", [128] = "resp-value",
        [16] = "get-color", [17] = "set-color", [144] = "resp-color"})
    --所有可能的字段都要定义，到时没有t:add就不会显示
    local f_left = ProtoField.uint32("ScoreBoard.left","Value Left",base.DEC) 
    local f_right = ProtoField.uint32("ScoreBoard.right","Value Right",base.DEC)
    local f_red = ProtoField.uint8("ScoreBoard.red","Color Red",base.DEC)
    local f_green = ProtoField.uint8("ScoreBoard.green","Color Green",base.DEC)
    local f_blue = ProtoField.uint8("ScoreBoard.blue","Color Blue",base.DEC)
    p_ScoreBoard.fields = { f_identifier, f_operator, f_left, f_right, f_red, f_green, f_blue }
    
	--特定协议的子细分表 e.g. TCP subdissectors like http, smtp, sip are added to table "tcp.port")
	--将更多的解剖器添加到表中很有用，以便它们显示在``解码为...''对话框中。
    local data_dis = Dissector.get("data")
    
	
    local function ScoreBoard_dissector(buf,pkt,root)
        local buf_len = buf:len();
        --先检查报文长度，太短的不是我的协议
        if buf_len < 17 then return false end
        --取得前16字节identifier字段的值
        local v_identifier = buf(0,16)
		
        --验证identifier是否正确
        if ((buf(0,1):uint()~=226) or (buf(1,1):uint()~=203) or (buf(2,1):uint()~=181)
            or (buf(3,1):uint()~=128) or (buf(4,1):uint()~=203) or (buf(5,1):uint()~=9)
            or (buf(6,1):uint()~=78) or (buf(7,1):uint()~=186) or (buf(8,1):uint()~=163)
            or (buf(9,1):uint()~=107) or (buf(10,1):uint()~=246) or (buf(11,1):uint()~=7)
            or (buf(12,1):uint()~=206) or (buf(13,1):uint()~=149) or (buf(14,1):uint()~=63)
            or (buf(15,1):uint()~=43))
            --不正确就不是我的协议
            then return false end
        --取得operator的值
        local v_operator = buf(16,1)
        local i_operator = v_operator:uint()
        
        --现在知道是我的协议了，放心大胆添加Packet Details
        local t = root:add(p_ScoreBoard,buf)
        --在Packet List窗格的Protocol列
        pkt.cols.protocol = "ScoreBoard"
		
        t:add(f_identifier,v_identifier)
        t:add(f_operator,v_operator)
        
        if ((i_operator == 1) or (i_operator == 128)) and (buf_len >= 25) then
            --把存在的字段逐个添加进去
            t:add(f_left,buf(17,4))
            t:add(f_right,buf(21,4))
        elseif ((i_operator == 17) or (i_operator == 144)) and (buf_len >= 20) then
            t:add(f_red,buf(17,1))
            t:add(f_green,buf(18,1))
            t:add(f_blue,buf(19,1))
        end
        return true
    end
    --要解析的缓冲区
	--数据包信息
	--在其上添加协议项的树
	--返回值: 解析的字节数。 请注意，某些解剖器总是在传入缓冲区中返回字节数，因此请注意。
    function p_ScoreBoard.dissector(buf,pkt,root) 
        if ScoreBoard_dissector(buf,pkt,root) then
            --valid ScoreBoard diagram
        else
            --data这个dissector几乎是必不可少的；当发现不是我的协议时，就应该调用data
            data_dis:call(buf,pkt,root)
        end
    end
    
	-- 注册
    --只需要处理UDP1127端口就可以了
    DissectorTable.get("udp.port").udp_encap_table:add(1127,p_ScoreBoard)
end


