typedef struct pkcs7_st {
    /*
     * The following is non NULL if it contains ASN1 encoding of this
     * structure
     */
    unsigned char *asn1;
    long length;
# define PKCS7_S_HEADER  0
# define PKCS7_S_BODY    1
# define PKCS7_S_TAIL    2
    int state;                  /* used during processing */  //OBJ_nid2obj(type);
    int detached;
    ASN1_OBJECT *type;
    /* content as defined by the type */
    /*
     * all encryption/message digests are applied to the 'contents', leaving
     * out the 'type' field.
     */
    union {
        char *ptr;
        /* NID_pkcs7_data */
        ASN1_OCTET_STRING *data;
        /* NID_pkcs7_signed */
        PKCS7_SIGNED *sign;
        /* NID_pkcs7_enveloped */
        PKCS7_ENVELOPE *enveloped;
        /* NID_pkcs7_signedAndEnveloped */
        PKCS7_SIGN_ENVELOPE *signed_and_enveloped;
        /* NID_pkcs7_digest */
        PKCS7_DIGEST *digest;
        /* NID_pkcs7_encrypted */
        PKCS7_ENCRYPT *encrypted;
        /* Anything else */
        ASN1_TYPE *other;
    } d;
} PKCS7;

//====================================enc start=============================================//
typedef struct pkcs7_enveloped_st {
    ASN1_INTEGER *version;      /* version 0 */ //ASN1_INTEGER_set(p7->d.enveloped->version, 0)
    STACK_OF(PKCS7_RECIP_INFO) *recipientinfo;//存放加密算法，加密密钥，证书信息
    PKCS7_ENC_CONTENT *enc_data;   //存放加密数据，加密算法，
} PKCS7_ENVELOPE;


typedef struct pkcs7_enc_content_st {
    ASN1_OBJECT *content_type;   //OBJ_nid2obj(NID_pkcs7_data);
    X509_ALGOR *algorithm;    //算法的obj
    ASN1_OCTET_STRING *enc_data; /* [ 0 ] */  //加密数据存放位置
    const EVP_CIPHER *cipher;  //加密算法
} PKCS7_ENC_CONTENT;

typedef struct pkcs7_recip_info_st {
    ASN1_INTEGER *version;      /* version 0 */
    PKCS7_ISSUER_AND_SERIAL *issuer_and_serial;
    X509_ALGOR *key_enc_algor;  //指定 加密key 加密算法
	    
    ASN1_OCTET_STRING *enc_key;  //unsigned char *ek = NULL;size_t eklen;// 加密密钥对位置  ASN1_STRING_set0(ri->enc_key, ek, eklen); 
    X509 *cert;                 /* get the pub-key from this */
} PKCS7_RECIP_INFO;

typedef struct pkcs7_issuer_and_serial_st {
    X509_NAME *issuer;
    ASN1_INTEGER *serial;
} PKCS7_ISSUER_AND_SERIAL;


struct X509_algor_st {
    ASN1_OBJECT *algorithm; //OBJ_nid2obj(NID_rsaEncryption)
    ASN1_TYPE *parameter;  //ASN1_TYPE_set(alg->parameter, V_ASN1_NULL, 0); //内部存放iv数据
} /* X509_ALGOR */ ;


PKCS7_set_type(p7, NID_pkcs7_enveloped);
	 p7->type = OBJ_nid2obj(NID_pkcs7_enveloped);
	p7->d.enveloped = PKCS7_ENVELOPE_new()
	ASN1_INTEGER_set(p7->d.enveloped->version, 0) //设置版本
	p7->d.enveloped->enc_data->content_type = OBJ_nid2obj(NID_pkcs7_data);
	
PKCS7_set_cipher(p7,EVP_des_cbc());
	PKCS7_ENC_CONTENT *ec = p7->d.enveloped->enc_data;
	ec->cipher = cipher;//EVP_des_cbc()
	
//设置接收者证书，获取公钥用于加密对称密钥	
PKCS7_add_recipient(p7,x509_Cert);
	PKCS7_RECIP_INFO *ri = PKCS7_RECIP_INFO_new();
	PKCS7_RECIP_INFO_set(ri, x509);//int PKCS7_RECIP_INFO_set(PKCS7_RECIP_INFO *p7i, X509 *x509)	
		ASN1_INTEGER_set(p7i->version, 0)
		X509_NAME_set(&p7i->issuer_and_serial->issuer,X509_get_issuer_name(x509))
		ASN1_INTEGER_free(p7i->issuer_and_serial->serial);
		p7i->issuer_and_serial->serial = ASN1_INTEGER_dup(X509_get_serialNumber(x509))
		pkey = X509_get0_pubkey(x509);
		
		ret = pkey->ameth->pkey_ctrl(pkey, ASN1_PKEY_CTRL_PKCS7_ENCRYPT, 0, p7i);
			X509_ALGOR *alg = NULL;
			alg = ri->key_enc_algor;
			X509_ALGOR_set0(alg, OBJ_nid2obj(NID_rsaEncryption), V_ASN1_NULL, 0);//int X509_ALGOR_set0(X509_ALGOR *alg, ASN1_OBJECT *aobj, int ptype, void *pval)
				alg->parameter = ASN1_TYPE_new();
				ASN1_OBJECT_free(alg->algorithm);
				alg->algorithm = aobj;
				ASN1_TYPE_set(alg->parameter, ptype, pval);
		p7i->cert = x509;
				
	PKCS7_add_recipient_info(p7, ri);
		STACK_OF(PKCS7_RECIP_INFO) *sk = p7->d.enveloped->recipientinfo;
		sk_PKCS7_RECIP_INFO_push(sk, ri)
	
BIO *PKCS7_dataInit(PKCS7 *p7, BIO *bio)
		STACK_OF(PKCS7_RECIP_INFO) *rsk = NULL;
		X509_ALGOR *xalg = NULL;
		PKCS7_RECIP_INFO *ri = NULL;
		const EVP_CIPHER *evp_cipher = NULL;
		
        rsk = p7->d.enveloped->recipientinfo;
        xalg = p7->d.enveloped->enc_data->algorithm;
		evp_cipher = p7->d.enveloped->enc_data->cipher;
		
        unsigned char key[EVP_MAX_KEY_LENGTH];
        unsigned char iv[EVP_MAX_IV_LENGTH];
        int keylen, ivlen;
        EVP_CIPHER_CTX *ctx;

		
        keylen = EVP_CIPHER_key_length(evp_cipher);
        ivlen = EVP_CIPHER_iv_length(evp_cipher);
		
		
		
		
		xalg->algorithm = OBJ_nid2obj(EVP_CIPHER_type(evp_cipher));
		
		//随机生成iv
        if (ivlen > 0)
            if (RAND_bytes(iv, ivlen) <= 0)
                goto err;
        if (EVP_CipherInit_ex(ctx, evp_cipher, NULL, NULL, NULL, 1) <= 0)
            goto err;
		//随机生成key
        if (EVP_CIPHER_CTX_rand_key(ctx, key) <= 0)
            goto err;
        if (EVP_CipherInit_ex(ctx, NULL, NULL, key, iv, 1) <= 0)
            goto err;
		
		pkcs7_encode_rinfo(ri, key, keylen)
				static int pkcs7_encode_rinfo(PKCS7_RECIP_INFO *ri,
											  unsigned char *key, int keylen)
				{
					EVP_PKEY_CTX *pctx = NULL;
					EVP_PKEY *pkey = NULL;
					unsigned char *ek = NULL;
					int ret = 0;
					size_t eklen;

					pkey = X509_get0_pubkey(ri->cert);

					if (!pkey)
						return 0;

					pctx = EVP_PKEY_CTX_new(pkey, NULL);
					if (!pctx)
						return 0;

					if (EVP_PKEY_encrypt_init(pctx) <= 0)
						goto err;

				#ifndef OPENSSL_NO_SM2
					if (OBJ_obj2nid(ri->key_enc_algor->algorithm) == NID_sm2encrypt_with_sm3) {
						EVP_PKEY_CTX_set_ec_scheme(pctx, NID_sm_scheme);
						EVP_PKEY_CTX_set_ec_encrypt_param(pctx, NID_sm3);
					}
				#endif

					if (EVP_PKEY_CTX_ctrl(pctx, -1, EVP_PKEY_OP_ENCRYPT,
										  EVP_PKEY_CTRL_PKCS7_ENCRYPT, 0, ri) <= 0) {
						PKCS7err(PKCS7_F_PKCS7_ENCODE_RINFO, PKCS7_R_CTRL_ERROR);
						goto err;
					}

					if (EVP_PKEY_encrypt(pctx, NULL, &eklen, key, keylen) <= 0)
						goto err;

					ek = OPENSSL_malloc(eklen);

					if (ek == NULL) {
						PKCS7err(PKCS7_F_PKCS7_ENCODE_RINFO, ERR_R_MALLOC_FAILURE);
						goto err;
					}

					if (EVP_PKEY_encrypt(pctx, ek, &eklen, key, keylen) <= 0)
						goto err;

					ASN1_STRING_set0(ri->enc_key, ek, eklen);//设置加密过后的私钥
					ek = NULL;

					ret = 1;

				 err:
					EVP_PKEY_CTX_free(pctx);
					OPENSSL_free(ek);
					return ret;

				}

		
		
		
BIO *PKCS7_dataDecode(PKCS7 *p7, EVP_PKEY *pkey, BIO *in_bio, X509 *pcert)
		enc_alg = p7->d.enveloped->enc_data->algorithm;
		
		EVP_CIPHER_asn1_to_param(evp_ctx, enc_alg->parameter)
		
//====================================enc end=============================================//
//====================================sign start=============================================//




设置类型
	PPKCS7_set_type(p7, NID_pkcs7_signed);
		p7->type =  OBJ_nid2obj(type);;
		p7->d.sign = PKCS7_SIGNED_new()
		ASN1_INTEGER_set(p7->d.sign->version, 1)


		
		
typedef struct pkcs7_signer_info_st {
    ASN1_INTEGER *version;      /* version 1 */
    PKCS7_ISSUER_AND_SERIAL *issuer_and_serial;
    X509_ALGOR *digest_alg;
    STACK_OF(X509_ATTRIBUTE) *auth_attr; /* [ 0 ] */
    X509_ALGOR *digest_enc_alg;
    ASN1_OCTET_STRING *enc_digest;
    STACK_OF(X509_ATTRIBUTE) *unauth_attr; /* [ 1 ] */
    /* The private key to sign with */
    EVP_PKEY *pkey;
} PKCS7_SIGNER_INFO;


typedef struct pkcs7_signed_st {
    ASN1_INTEGER *version;      /* version 1 */
    STACK_OF(X509_ALGOR) *md_algs; /* md used */
    STACK_OF(X509) *cert;       /* [ 0 ] */
    STACK_OF(X509_CRL) *crl;    /* [ 1 ] */
    STACK_OF(PKCS7_SIGNER_INFO) *signer_info;
    struct pkcs7_st *contents;
} PKCS7_SIGNED;

	



设置内容
	PKCS7_content_new(p7, NID_pkcs7_data);
		PKCS7_new()
		PKCS7_set_type
			p7->d.data = M_ASN1_OCTET_STRING_new()
		PKCS7_set_content
			PKCS7_free(p7->d.sign->contents);
			p7->d.sign->contents = p7_data;
	

	
添加签名者:
	PKCS7_add_signature
		si = PKCS7_SIGNER_INFO_new()
		PKCS7_SIGNER_INFO_set
			ASN1_INTEGER_set(p7i->version, 1)
			X509_NAME_set(&p7i->issuer_and_serial->issuer,X509_get_issuer_name(x509))
			p7i->issuer_and_serial->serial = ASN1_INTEGER_dup(X509_get_serialNumber(x509))
			设置算法
			p7i->digest_alg->algorithm = OBJ_txt2obj("1.2.156.10197.1.401",0); 
			
		PKCS7_add_signer
			signer_sk = p7->d.sign->signer_info;
			md_sk = p7->d.sign->md_algs;
			设置摘要算法
			nid = OBJ_obj2nid(psi->digest_alg->algorithm);
			alg->algorithm = OBJ_nid2obj(nid);
			sk_X509_ALGOR_push(md_sk, alg)   
			获取当前签名的hash算法
			sk_PKCS7_SIGNER_INFO_push(signer_sk, psi)

添加证书:
	PKCS7_add_certificate
		sk = &(p7->d.sign->cert);
		sk_X509_push(*sk, x509)
		
		
设置签名数据:
	ASN1_STRING_set(si->enc_digest, (unsigned char *)signdata, signlen)
	if(PKCS7_is_detached(p7) && PKCS7_type_is_data(p7))
		设置原文数据
		p7->d.sign->contents->d.data;
		
		
typedef struct pkcs7_signer_info_st {
    ASN1_INTEGER *version;      /* version 1 */
    PKCS7_ISSUER_AND_SERIAL *issuer_and_serial;
    X509_ALGOR *digest_alg;
    STACK_OF(X509_ATTRIBUTE) *auth_attr; /* [ 0 ] */
    X509_ALGOR *digest_enc_alg;
    ASN1_OCTET_STRING *enc_digest;
    STACK_OF(X509_ATTRIBUTE) *unauth_attr; /* [ 1 ] */
    /* The private key to sign with */
    EVP_PKEY *pkey;
} PKCS7_SIGNER_INFO;

typedef struct pkcs7_signed_st {
    ASN1_INTEGER *version;      /* version 1 */
    STACK_OF(X509_ALGOR) *md_algs; /* md used */
    STACK_OF(X509) *cert;       /* [ 0 ] */
    STACK_OF(X509_CRL) *crl;    /* [ 1 ] */
    STACK_OF(PKCS7_SIGNER_INFO) *signer_info; //签名信息
    struct pkcs7_st *contents; //原文
} PKCS7_SIGNED;


typedef struct pkcs7_st {
    /*
     * The following is non NULL if it contains ASN1 encoding of this
     * structure
     */
    unsigned char *asn1;
    long length;
# define PKCS7_S_HEADER  0
# define PKCS7_S_BODY    1
# define PKCS7_S_TAIL    2
    int state;                  /* used during processing */
    int detached;
    ASN1_OBJECT *type;
    /* content as defined by the type */
    /*
     * all encryption/message digests are applied to the 'contents', leaving
     * out the 'type' field.
     */
    union {
        char *ptr;
        /* NID_pkcs7_data */
        ASN1_OCTET_STRING *data;
        /* NID_pkcs7_signed */
        PKCS7_SIGNED *sign;   
        /* NID_pkcs7_enveloped */
        PKCS7_ENVELOPE *enveloped;
        /* NID_pkcs7_signedAndEnveloped */
        PKCS7_SIGN_ENVELOPE *signed_and_enveloped;
        /* NID_pkcs7_digest */
        PKCS7_DIGEST *digest;
        /* NID_pkcs7_encrypted */
        PKCS7_ENCRYPT *encrypted;
        /* Anything else */
        ASN1_TYPE *other;
    } d;
} PKCS7;










//---------------------------------------------------------------------------//
获取原文内容
	PKCS7_get_octet_string(p7->d.sign->contents);


从签名者获取 hash数据
	PKCS7_digest_from_attributes(sk_PKCS7_SIGNER_INFO_value(p7->d.sign->signer_info,0)->auth_attr)


获取证书
	sk_X509_value(p7->d.sign->cert, i);
	
获取签名数据	
	os=sk_PKCS7_SIGNER_INFO_value(p7->d.sign->signer_info,0)->enc_digest;


	
	
//====================================sign end=============================================//



