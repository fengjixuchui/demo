
#include <openssl/gmapi.h>



typedef struct ECCrefPairEnvelopedKey_st
{
	unsigned int version;             //   	当前版本为xxx，此处填写xx；
	unsigned int ulSymmAlgID;     	// 	对称算法标识，限定ECB/CBC模式
	unsigned int ulBits;              //  	密钥对的密钥位长度
	unsigned char encryptedPriKey[64];  //	密钥对私钥的密文
	ECCrefPublicKey pubKey;           //	密钥对的公钥
	ECCCipher pairCipher;              //	用保护公钥加密的对称密钥密文。
} ECCPairEnvelopedKey;



#include <openssl/sm2.h>

  static EC_KEY* pubkeyToEC_KEY(unsigned char * pubkey, int len){

  	EC_KEY *ret;
  	BIGNUM *x = NULL;
  	BIGNUM *y = NULL;
  	if (!(ret = EC_KEY_new_by_curve_name(NID_sm2p256v1))) {
  		printf("EC_KEY_new_by_curve_name failed \n");
  		return NULL;
  	}
  	if (!(x = BN_bin2bn(pubkey, 0x20, NULL))) {
  		printf("BN_bin2bn failed \n");
  		goto end;
  	}
  	if (!(y = BN_bin2bn(pubkey + 0x20, 0x20, NULL))) {
  		printf("BN_bin2bn failed \n");
  		goto end;
  	}
  	if (!EC_KEY_set_public_key_affine_coordinates(ret, x, y)) {
  		printf("EC_KEY_set_public_key_affine_coordinates failed \n");
  		goto end;
  	}
  end:
    BN_free(x);
    BN_free(y);
  	return ret;

  }

EC_KEY * prikeyTOEC_KEY(unsigned char * prikey, int len)
{
        int ret = -1;
        BIGNUM *d = NULL;
        EC_KEY *ec_key = 0;
        ec_key = EC_KEY_new_by_curve_name(NID_sm2p256v1);
        if (ec_key == 0) {
                printf("EC_KEY_new_by_curve_name failed,%s\n ", ERR_error_string(ERR_get_error(), 0));
                goto end;
        }
        int BitLen = EC_GROUP_get_degree(EC_KEY_get0_group(ec_key));
        if (len != 32) {
                printf("pri key is invalid\n");
                goto end;
        }
        if (!(d = BN_bin2bn(prikey, len, NULL))) {
                printf("BN_bin2bn failed,%s\n ", ERR_error_string(ERR_get_error(), 0));
                goto end;
        }

        if (!EC_KEY_set_private_key(ec_key, d)) {
                printf("EC_KEY_set_private_key  failed,%s\n ", ERR_error_string(ERR_get_error(), 0));
                goto end;
        }
        ret = 0;
end:
        BN_clear_free(d);
        if (ret == 0) {
                return ec_key;
        }
        EC_KEY_free(ec_key);
        return 0;

}

int _decrypt(EC_KEY *ec_key, std::string & data, std::string & decrypt)
{
        const unsigned char* inData = (const unsigned char*)data.data();
        size_t inDataLen = data.length();
        unsigned char* p;
        int ret;
    
        unsigned char *out;
        size_t outlen = 0;

 

        ret = SM2_decrypt(NID_sm3, inData, inDataLen, 0, &outlen, ec_key);
        if (ret != 1) {
                printf("SM2_decrypt failed,%s\n ", ERR_error_string(ERR_get_error(), 0));
                return -1;
        }

        out = (unsigned char*)calloc(outlen, sizeof(char));
        if (out == 0) { printf("calloc failed"); return -1; }


        ret = SM2_decrypt(NID_sm3, inData, inDataLen, out, &outlen, ec_key);
        if (ret != 1) {
                printf("SM2_decrypt failed,%s\n ", ERR_error_string(ERR_get_error(), 0));
                free(out);
                return -1;
        }

        decrypt.clear();
        decrypt.append((char*)out, outlen);
        free(out);
        return 0;
}


static int SM4_encrypt(unsigned char * inBuf, int inBufLen ,
					   unsigned char *outBuf,int *outBufLen,int do_encrypt, int model, unsigned char* iv, unsigned char* key)
{
	EVP_CIPHER_CTX *ctx = 0;
	int tmplen = 0;
	int encLen = 0;
	int ret = 0;
	//unsigned char iv[] = "1234567887654321"; 
	//unsigned char key[16]={0x11,0x13,0xdd,0x13,0x11,0x13,0x11,0x13,0xff,0x13,0x11,0xcc,0xee,0x13,0x11,0xea};

	ctx = EVP_CIPHER_CTX_new();  //creates a cipher context.
	if(model == 1){
		if(!EVP_CipherInit_ex(ctx, EVP_sms4_cbc(), NULL, key, iv, do_encrypt)){
			printf("%s\n", ERR_error_string(ERR_get_error(), NULL));
			ret = -1;goto err;
		}
	}else{
		
		if(!EVP_CipherInit_ex(ctx, EVP_sms4_ecb(), NULL, key, 0, do_encrypt)){
			printf("%s\n", ERR_error_string(ERR_get_error(), NULL));
			ret = -1;goto err;
		}
		EVP_CIPHER_CTX_set_padding(ctx,0);
		
	}

	//int ret = EVP_Cipher(ctx,outBuf,inBuf,inBufLen);
	if(!EVP_CipherUpdate(ctx, outBuf, &tmplen, inBuf, inBufLen)){
		printf("%s\n", ERR_error_string(ERR_get_error(), NULL));
		 ret = -1;goto err;
	}
    encLen = tmplen;
	if(!EVP_CipherFinal(ctx, outBuf+tmplen, &tmplen)){
		printf("%s\n", ERR_error_string(ERR_get_error(), NULL));
		ret = -1;goto err;
	}
	encLen += tmplen;
	*outBufLen = encLen;
	ret = 0;
err:
	EVP_CIPHER_CTX_free(ctx);
	return ret;
	
}




static int ECDSA_SIG_get_signdataBuf(const ECDSA_SIG *sig, unsigned char *buf,int *bufLen)
{
  /* (r, s) are pointed to (sig->r, sig->s), so dont free (r, s) */
  const BIGNUM *r = NULL;
  const BIGNUM *s = NULL;

  /* check arguments */
  if (!sig || !buf)
  {
      return -1;
  }
  if(*bufLen < 64){
    printf("bufLen < 64");
    return -1;
  }
  memset(buf, 0x00, 64);
  /* check ECDSA_SIG
   * `ECDSA_SIG_get0() return void
   */
  ECDSA_SIG_get0(sig, &r, &s);

  int num_r = BN_num_bytes(r);
  int num_s = BN_num_bytes(s);


if( num_s > 32 || num_r > 32)
{
  printf("num_s %d || num_r %d",num_s, num_r);
  return -1;
}
char * p = BN_bn2hex(r);
printf("sizeof(BN_ULONG) %d\n",sizeof(BN_ULONG));
//((i * BN_BITS2) + BN_num_bits_word(a->d[i]));
  if (!BN_bn2bin(r, buf + (32-num_r)))
  {
      printf("r BN_bn2bin failed");
      return -1;
  }
  if (!BN_bn2bin(s, buf + 32 + (32-num_s)))
  {
      printf("s BN_bn2bin failed");
      return -1;
  }
  *bufLen= 64;
  return 0;
}


int SignData(const char* plainData, int plainDataLen, char* outSignData,int* outSignDataLen,EC_KEY *ec /*pri*/){
    int ret = 0;
	ECDSA_SIG *es_sign = 0;

    es_sign = SM2_do_sign((const unsigned char*)plainData, plainDataLen, ec);
    if (es_sign == 0)
    {
        printf("SM2_do_sign failed!");
        ret = -1; goto err;
    }
    ret = ECDSA_SIG_get_signdataBuf(es_sign, (unsigned char* )outSignData,outSignDataLen);
	if( ret != 0){
		printf("ECDSA_SIG_get_signdataBuf failed!");
		ret = -1; goto err;
	}
	ret = 0;
err:
	
	if(es_sign) ECDSA_SIG_free(es_sign);
	return ret;
}



int VerifyData(unsigned char * dgst,int dgstLen, unsigned char* sig,int sigLen,EC_KEY *ec_key/*pub*/)
{

  
  int ret = 0;
  ECDSA_SIG *ecdSig = 0;
  BIGNUM* r = 0, *s = 0;
  unsigned char *der = NULL;
  int derlen = 0;

  

  if(sigLen < 64){
    printf("sigature data sigLen < 64");
    ret = -1;
    goto err;
  }

  ecdSig = ECDSA_SIG_new();
  if(sig == NULL)
  {
  	printf("ECDSA_SIG_new error.");
  	ret = -1;
  	goto err;
  }
  r = BN_new();
  s = BN_new();

  ECDSA_SIG_set0(ecdSig, r, s);

  if (!BN_bin2bn(sig, 32, r)) {
  	printf("BN_bin2bn r error.");
  	ret = -1;
  	goto err;
  }
  if (!BN_bin2bn(sig + 32, 32, s)) {
  	printf("BN_bin2bn s error.");
  	ret = -1;
  	goto err;
  }
  /*
  derlen = i2d_ECDSA_SIG(ecdSig, &der);
  if (derlen != sigLen || memcmp(sig, der, derlen)) {
  ERROR("sigautre data is not correct");
  ret = -1;
  goto err;
  }
  */

  ret = SM2_do_verify(dgst, dgstLen, ecdSig, ec_key);
  if(ret != 1){
    unsigned long ulErr = ERR_get_error();
    const char* errStr = ERR_lib_error_string(ulErr);
    const char* errFunc = ERR_func_error_string(ulErr);
    //ERR_error_string(ERR_get_error()
    printf("SM2_do_verify failed,ulErr:%d errStr:[%s] errFunc:[%s]",ulErr,errStr, errFunc);
    //LOG::DEBUGHEXLOG((char*)dgst,dgstLen,"SM2_do_verify [indata]");
    //LOG::DEBUGHEXLOG((char*)sig,sigLen,"SM2_do_verify [sigData]");
    ret = -1;
    goto err;
  }

  ret = 0;
err:
  if (derlen > 0) {
    OPENSSL_cleanse(der, derlen);
    OPENSSL_free(der);
  }
  ECDSA_SIG_free(ecdSig);
  EC_KEY_free(ec_key);

  return ret;
}

int main(int argc, char *argv[]){

	unsigned char base64[] = "xxxxxxxxxxxxxxx";
	char out[1024];
	int outLen = 1024;

	//showPubKeyFromX509();
	//GetCertOrg(s_cert,sizeof(s_cert),out,sizeof(out));
	base64_decode((unsigned char *)out,&outLen,(unsigned char *)base64,strlen((char*)base64));
	
	print_arr("decode data", ( unsigned char*)out, outLen);
	
	//WriteToFile(out,outLen);
	
#if 1
	{
		printf("ECCPairEnvelopedKey: %d\n", sizeof(ECCPairEnvelopedKey));
		char PrivateKeyDerBuf[32]={0xa1,0xc3,0xad,0x25,0x19,0x6a,0x15,0xad,0x1d,0x40,0x10,0x12,0x79,0x35,0x59,0xd3, 
           0x5f,0x41,0x84,0x4a,0xe4,0xa5,0x1c,0x1d,0x2e,0x90,0x1b,0xb3,0xeb,0xa2,0xd1,0x10};
		EC_KEY * ec_key = prikeyTOEC_KEY((unsigned char*)PrivateKeyDerBuf, 32);
		std::string encData,decData;
		ECCPairEnvelopedKey * k = (ECCPairEnvelopedKey*)out;
		unsigned char buf[4096] = {0};
		unsigned char *p = (unsigned char*)buf;
		int bufLen = i2d_ECCCipher(&k->pairCipher,&p);

		encData.append((char*)buf, bufLen);
		int ret = _decrypt(ec_key,encData,decData);
		if(ret != 0){
			printf("_decrypt failed \n");
		}
		print_arr("decrypt data", ( unsigned char*)decData.data(), decData.length());

		{
			unsigned char decPriKey[128]={0};
			int decPriKeyLen = sizeof(decPriKey);
			ret = SM4_encrypt((unsigned char* )k->encryptedPriKey+32,32,decPriKey,&decPriKeyLen,0,0,0,( unsigned char*)decData.data());
			if(ret != 0){
				printf("SM4_encrypt failed \n");
				return -1;
			}
			print_arr("SM4_encrypt data", ( unsigned char*)decPriKey, decPriKeyLen);

		}

		
		{
			unsigned char pri_key[] = {0x10,0xff,0x29,0xa0,0xb0,0xd1,0x06,0xde,0x23,0x29,0x92,0x9d,0x76,0xa7,0xfe,0xa8,
							0xd5,0xaf,0x1c,0xcd,0x52,0x78,0x43,0xbe,0x37,0x5d,0xdf,0xef,0x91,0x1c,0xcf,0x55};
			unsigned char pub_key[64] = {0};
			memcpy(pub_key, k->pubKey.x+32,32);
			memcpy(pub_key+32, k->pubKey.y+32,32);

			EC_KEY * pri = prikeyTOEC_KEY(pri_key,32);
			EC_KEY * pub = pubkeyToEC_KEY(pub_key,64);

			  unsigned char inData[]={
				0x49,0x07,0x83,0x42,0x49,0x57,0x8F,0xED,0xA7,0xEF,0xDA,0x88,0xE5,0x5B,0x80,0x12
				,0xE5,0x74,0x7D,0xA6,0xD0,0x69,0x19,0xC5,0x2D,0xF4,0x9E,0x8D,0xE9,0x33,0xF2,0x9F
			  };
			    unsigned char signData[128]={0};
				int signDataLen = sizeof(signData);
			ret = SignData((char*)inData, sizeof(inData), (char*)signData, &signDataLen,pri);
			if(ret != 0){
			  printf("[test] SignData failed, ret: %d ", ret);
			  return -1;
			}

			ret = VerifyData(inData, sizeof(inData),signData, signDataLen,pub);
			if(ret != 0){
			  printf("[test] VerifyData failed, ret: %d ", ret);
			  return -1;
			}

		}
	}
#endif

	return 0;


}


